// Weather functionality for NaviMate
// Simple GPS weather with OpenWeatherMap API

class WeatherService {
  constructor() {
    this.apiKey = localStorage.getItem('weather_api_key') || '';
    this.baseUrl = 'https://api.openweathermap.org/data/2.5/weather';
    this.units = 'metric';
    this.lang = 'ru';
    
    this.weatherInfo = document.getElementById('weatherInfo');
    this.weatherError = document.getElementById('weatherError');
    this.getWeatherBtn = document.getElementById('getWeatherBtn');
    
    this.init();
  }
  
  init() {
    this.getWeatherBtn.addEventListener('click', () => this.getWeather());
    this.updateLanguage();
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ GPS
  async getWeather() {
    if (!navigator.geolocation) {
      this.showError('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      return;
    }
    
    this.getWeatherBtn.disabled = true;
    this.getWeatherBtn.textContent = 'üå§Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ...';
    
    try {
      const position = await this.getCurrentPosition();
      const { latitude, longitude } = position.coords;
      
      const weatherData = await this.fetchWeather(latitude, longitude);
      this.displayWeather(weatherData);
      this.hideError();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
      this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è GPS.');
    } finally {
      this.getWeatherBtn.disabled = false;
      this.getWeatherBtn.textContent = this.getTranslation('getWeather');
    }
  }
  
  // Promise-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è getCurrentPosition
  getCurrentPosition() {
    return new Promise((resolve, reject) => {
      navigator.geolocation.getCurrentPosition(resolve, reject, {
        enableHighAccuracy: true,
        timeout: 15000,
        maximumAge: 300000 // 5 –º–∏–Ω—É—Ç
      });
    });
  }
  
  // –ó–∞–ø—Ä–æ—Å –∫ API OpenWeatherMap
  async fetchWeather(lat, lon) {
    if (!this.apiKey) {
      throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const url = `${this.baseUrl}?lat=${lat}&lon=${lon}&appid=${this.apiKey}&units=${this.units}&lang=${this.lang}`;
    
    const response = await fetch(url);
    if (!response.ok) {
      if (response.status === 401) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
      } else if (response.status === 429) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
      }
    }
    
    return await response.json();
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
  displayWeather(data) {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    document.getElementById('weatherIcon').textContent = this.getWeatherIcon(data.weather[0].id);
    document.getElementById('weatherTemp').textContent = `${Math.round(data.main.temp)}¬∞C`;
    document.getElementById('weatherDesc').textContent = data.weather[0].description;
    
    // –î–µ—Ç–∞–ª–∏
    document.getElementById('weatherWind').textContent = `${data.wind.speed} –º/—Å`;
    document.getElementById('weatherWindDir').textContent = this.getWindDirection(data.wind.deg);
    document.getElementById('weatherHumidity').textContent = `${data.main.humidity}%`;
    document.getElementById('weatherPressure').textContent = `${Math.round(data.main.pressure)} –≥–ü–∞`;
    
    // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    document.getElementById('weatherLocation').textContent = `üìç ${data.name}, ${data.sys.country}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    this.weatherInfo.style.display = 'block';
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
  getWeatherIcon(weatherId) {
    const icons = {
      200: '‚õàÔ∏è', // –≥—Ä–æ–∑–∞ —Å –¥–æ–∂–¥–µ–º
      300: 'üåßÔ∏è', // –º–æ—Ä–æ—Å—å
      500: 'üåßÔ∏è', // –¥–æ–∂–¥—å
      600: '‚ùÑÔ∏è', // —Å–Ω–µ–≥
      700: 'üå´Ô∏è', // —Ç—É–º–∞–Ω
      800: '‚òÄÔ∏è', // —è—Å–Ω–æ
      801: 'üå§Ô∏è', // –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ
      802: '‚õÖ', // –æ–±–ª–∞—á–Ω–æ
      803: '‚òÅÔ∏è', // –ø–∞—Å–º—É—Ä–Ω–æ
      804: '‚òÅÔ∏è'  // –ø–∞—Å–º—É—Ä–Ω–æ
    };
    
    const category = Math.floor(weatherId / 100);
    return icons[weatherId] || icons[category * 100] || 'üå§Ô∏è';
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
  getWindDirection(degrees) {
    const directions = ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó'];
    const index = Math.round(degrees / 45) % 8;
    return directions[index];
  }
  
  // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
  showError(message) {
    this.weatherError.querySelector('p').textContent = `‚ùå ${message}`;
    this.weatherError.style.display = 'block';
    this.weatherInfo.style.display = 'none';
  }
  
  // –°–∫—Ä—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
  hideError() {
    this.weatherError.style.display = 'none';
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
  getTranslation(key) {
    const lang = window.lang || 'ru';
    const translations = window.translations?.[lang] || {};
    return translations[key] || key;
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
  updateLanguage() {
    this.getWeatherBtn.textContent = this.getTranslation('getWeather');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á
  const apiKey = localStorage.getItem('weather_api_key');
  
  if (apiKey) {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã
    const weatherService = new WeatherService();
    window.weatherService = weatherService;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    const apiKeyInput = document.getElementById('weather-api-key');
    if (apiKeyInput) {
      apiKeyInput.value = apiKey;
    }
    
  } else {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ API –∫–ª—é—á–∞
    const weatherSection = document.getElementById('weather-section');
    if (weatherSection) {
      weatherSection.innerHTML = `
        <h2>üå§Ô∏è –ü–æ–≥–æ–¥–∞</h2>
        <hr style="margin: 12px 0; border-color: #ccc;">
        <div style="text-align: center; padding: 40px 20px;">
          <p>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á OpenWeatherMap</p>
          <p><a href="https://openweathermap.org/api" target="_blank" style="color: #2196F3;">–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á</a></p>
          <p style="font-size: 14px; color: #666; margin-top: 20px;">
            –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
          </p>
        </div>
      `;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞
  const saveApiBtn = document.getElementById('save-weather-api');
  if (saveApiBtn) {
    saveApiBtn.addEventListener('click', () => {
      const apiKeyInput = document.getElementById('weather-api-key');
      const newApiKey = apiKeyInput.value.trim();
      
      if (newApiKey) {
        localStorage.setItem('weather_api_key', newApiKey);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–∞
        location.reload();
      }
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ
document.addEventListener('languageChanged', () => {
  if (window.weatherService) {
    window.weatherService.updateLanguage();
  }
});