// Weather functionality for NaviMate
// Simple GPS weather with OpenWeatherMap API

class WeatherService {
  constructor() {
    // OpenWeatherMap API (–æ—Å–Ω–æ–≤–Ω–æ–π)
    this.apiKey = (typeof window !== 'undefined' && window.OPENWEATHER_API_KEY) ? window.OPENWEATHER_API_KEY : 'd8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8';
    this.baseUrl = 'https://api.openweathermap.org/data/2.5/weather';
    this.forecastUrl = 'https://api.openweathermap.org/data/2.5/forecast';
    
    this.units = 'metric';
    this.lang = 'ru';
    
    this.weatherInfo = document.getElementById('weatherInfo');
    this.weatherError = document.getElementById('weatherError');
    this.getWeatherBtn = document.getElementById('getWeatherBtn');
    
    this.init();
  }
  

  
  init() {
    this.getWeatherBtn.addEventListener('click', () => this.getWeather());
    this.updateLanguage();
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ GPS
  async getWeather() {
    if (!navigator.geolocation) {
      this.showError(this.getTranslation('geolocationError'));
      return;
    }
    
    this.getWeatherBtn.disabled = true;
    this.getWeatherBtn.textContent = `üå§Ô∏è ${this.getTranslation('gettingWeather')}`;
    
    try {
      const position = await this.getCurrentPosition();
      const { latitude, longitude } = position.coords;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑
      const [weatherData, forecastData] = await Promise.all([
        this.fetchWeather(latitude, longitude),
        this.fetchForecast(latitude, longitude)
      ]);
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –£–§ –∏–Ω–¥–µ–∫—Å (Open-Meteo)
      const uvPromise = this.fetchUvIndex(latitude, longitude);
      
      this.displayWeather(weatherData);
      this.displayForecast(forecastData);
      
      const uv = await uvPromise;
      if (uv != null) {
        const desc = this.getUvDescription(uv);
        document.getElementById('weatherUvIndex').textContent = `${uv} (${desc})`;
      }
      
      // –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –ø–∞–ª—É–±—ã —Å —É—á—ë—Ç–æ–º UV –∏ –æ—Å–∞–¥–∫–æ–≤ –∏–∑ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ —Ç–µ–∫—É—â–∏—Ö
      let hasPrecip = false;
      try {
        if (weatherData && (weatherData.rain || weatherData.snow)) {
          hasPrecip = true;
        }
        if (!hasPrecip && forecastData && forecastData.list && forecastData.list.length) {
          const f0 = forecastData.list[0];
          hasPrecip = !!(f0.rain || f0.snow);
        }
      } catch(e) {}
      const deck = this.evaluateDeckRisk(uv, weatherData.main.temp, weatherData.wind.speed, weatherData.main.humidity, hasPrecip);
      this.setDeckInfo(deck.message, deck.riskClass);
      
      this.hideError();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.code === 1) {
        this.showError(this.getTranslation('geolocationError'));
      } else if (error.code === 2) {
        this.showError(this.getTranslation('gpsPermissionError'));
      } else if (error.code === 3) {
        this.showError(this.getTranslation('gpsTimeoutError'));
      } else if (error.message && error.message.includes('API')) {
        this.showError(this.getTranslation('apiKeyError'));
      } else {
        this.showError(this.getTranslation('weatherError'));
      }
    } finally {
      this.getWeatherBtn.disabled = false;
      this.getWeatherBtn.textContent = this.getTranslation('getWeather');
    }
  }
  
  // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–ª–æ—É –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
  getCurrentPosition() {
    const fastCached = { enableHighAccuracy: false, timeout: 8000, maximumAge: 600000 };
    const hiWatch = { enableHighAccuracy: true, timeout: 30000, maximumAge: 0 };
    const loWatch = { enableHighAccuracy: false, timeout: 35000, maximumAge: 600000 };

    const once = (opts) => new Promise((resolve, reject) => {
      navigator.geolocation.getCurrentPosition(resolve, reject, opts);
    });

    const watchFor = (opts, msTimeout) => new Promise((resolve, reject) => {
      let watchId = null;
      const done = (fn) => (val) => { if (watchId != null) navigator.geolocation.clearWatch(watchId); clearTimeout(timer); fn(val); };
      const timer = setTimeout(done(reject), msTimeout || 15000, { code: 3, message: 'watchPosition timeout' });
      watchId = navigator.geolocation.watchPosition(done(resolve), done(reject), opts);
    });

    // 1) –ë—ã—Å—Ç—Ä—ã–π cached (—á–∞—Å—Ç–æ —Å–ø–∞—Å–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª–µ)
    return once(fastCached)
      // 2) –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî hi-accuracy watch 15 c
      .catch(() => watchFor(hiWatch, 15000))
      // 3) –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç ‚Äî low-accuracy watch 15 c
      .catch(() => watchFor(loWatch, 15000));
  }
  
  // –ó–∞–ø—Ä–æ—Å –∫ API OpenWeatherMap –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
  async fetchWeather(lat, lon) {
    if (!this.apiKey) {
      throw new Error(this.getTranslation('apiKeyNotFound'));
    }
    
    const lang = window.lang || 'ru';
    const apiLang = lang === 'en' ? 'en' : 'ru';
    const url = `${this.baseUrl}?lat=${lat}&lon=${lon}&appid=${this.apiKey}&units=${this.units}&lang=${apiLang}`;
    
    const response = await fetch(url);
    if (!response.ok) {
      if (response.status === 401) {
        throw new Error(this.getTranslation('apiKeyError'));
      } else if (response.status === 429) {
        throw new Error(this.getTranslation('apiLimitError'));
      } else {
        throw new Error(`${this.getTranslation('apiError')}: ${response.status}`);
      }
    }
    
    return await response.json();
  }
  
  // –ó–∞–ø—Ä–æ—Å –∫ API OpenWeatherMap –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
  async fetchForecast(lat, lon) {
    if (!this.apiKey) {
      throw new Error(this.getTranslation('apiKeyNotFound'));
    }
    
    const lang = window.lang || 'ru';
    const apiLang = lang === 'en' ? 'en' : 'ru';
    const url = `${this.forecastUrl}?lat=${lat}&lon=${lon}&appid=${this.apiKey}&units=${this.units}&lang=${apiLang}`;
    
    const response = await fetch(url);
    if (!response.ok) {
      if (response.status === 401) {
        throw new Error(this.getTranslation('apiKeyError'));
      } else if (response.status === 429) {
        throw new Error(this.getTranslation('apiLimitError'));
      } else {
        throw new Error(`${this.getTranslation('apiError')}: ${response.status}`);
      }
    }
    
    return await response.json();
  }

  async fetchUvIndex(lat, lon) {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=uv_index`;
    const res = await fetch(url);
    if (!res.ok) return null;
    const json = await res.json();
    return json && json.current && typeof json.current.uv_index !== 'undefined' ? json.current.uv_index : null;
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
  displayWeather(data) {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    document.getElementById('weatherIcon').textContent = this.getWeatherIcon(data.weather[0].id);
    document.getElementById('weatherTemp').textContent = `${Math.round(data.main.temp)}¬∞C`;
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    const weatherDesc = this.translateWeatherDescription(data.weather[0].description, data.weather[0].id);
    document.getElementById('weatherDesc').textContent = weatherDesc;
    
    // –î–µ—Ç–∞–ª–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–µ—Ç—Ä–∞ –ø–æ —à–∫–∞–ª–µ –ë–æ—Ñ–æ—Ä—Ç–∞
    const windSpeed = data.wind.speed;
    const windDescription = this.getBeaufortDescription(windSpeed);
    const lang = window.lang || 'ru';
    const windUnit = lang === 'en' ? 'm/s' : '–º/—Å';
    document.getElementById('weatherWind').textContent = `${windSpeed} ${windUnit} (${windDescription})`;
    document.getElementById('weatherWindDir').textContent = this.getWindDirection(data.wind.deg);
    document.getElementById('weatherHumidity').textContent = `${data.main.humidity}%`;
    
    // –í–∏–¥–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (data.visibility != null) {
      const v = Math.max(0, Number(data.visibility));
      const lang = window.lang || 'ru';
      if (v >= 10000) {
        const unit = lang === 'en' ? 'km' : '–∫–º';
        document.getElementById('weatherVisibility').textContent = `>10 ${unit}`;
      } else if (v >= 1000) {
        const km = (v / 1000).toFixed(v % 1000 === 0 ? 0 : 1);
        const unit = lang === 'en' ? 'km' : '–∫–º';
        document.getElementById('weatherVisibility').textContent = `${km} ${unit}`;
      } else {
        const m = Math.round(v);
        const unit = lang === 'en' ? 'm' : '–º';
        document.getElementById('weatherVisibility').textContent = `${m} ${unit}`;
      }
    } else {
      document.getElementById('weatherVisibility').textContent = '--';
    }
    
    // –£–§ –∏–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (data.uvi !== undefined) {
      document.getElementById('weatherUvIndex').textContent = `${data.uvi}`;
    } else {
      document.getElementById('weatherUvIndex').textContent = '--';
    }
    
    // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    const cityName = this.translateCityName(data.name);
    const countryCode = data.sys.country;
    const flag = this.getFlagEmoji(countryCode);
    const locationText = `${flag} ${cityName}`;
    document.getElementById('weatherLocation').textContent = locationText;
    
    // –ü–æ—Å–ª–µ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äî –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ UV (–µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω)
    const prelim = this.evaluateDeckRisk(undefined, data.main.temp, windSpeed, data.main.humidity, false);
    this.setDeckInfo(prelim.message, prelim.riskClass);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    this.weatherInfo.style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.updateAllWeatherElements();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    setTimeout(() => {
      this.forceUpdateAllElements();
    }, 100);
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
  displayForecast(data) {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (24 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥)
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–Ω—è
    const forecasts = {
      morning: this.findForecastForTime(data.list, 6), // 6:00
      day: this.findForecastForTime(data.list, 12),   // 12:00
      evening: this.findForecastForTime(data.list, 18), // 18:00
      night: this.findForecastForTime(data.list, 0)   // 0:00
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    Object.keys(forecasts).forEach(period => {
      const forecast = forecasts[period];
      if (forecast) {
        const periodId = period.charAt(0).toUpperCase() + period.slice(1);
        document.getElementById(`forecastIcon${periodId}`).textContent = 
          this.getWeatherIcon(forecast.weather[0].id);
        document.getElementById(`forecastTemp${periodId}`).textContent = 
          `${Math.round(forecast.main.temp)}¬∞C`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        if (forecast.wind && forecast.wind.speed) {
          const windSpeed = forecast.wind.speed;
          const windDescription = this.getBeaufortDescription(windSpeed);
          const lang = window.lang || 'ru';
          const windUnit = lang === 'en' ? 'm/s' : '–º/—Å';
          document.getElementById(`forecastWind${periodId}`).textContent = 
            `${windSpeed} ${windUnit} (${windDescription})`;
        }
      }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    document.getElementById('weatherForecast').style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    setTimeout(() => {
      this.forceUpdateAllElements();
    }, 100);
  }
  
  // –ü–æ–∏—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  findForecastForTime(forecastList, targetHour) {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(targetHour, 0, 0, 0);
    
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∫ —Ü–µ–ª–µ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    let closest = null;
    let minDiff = Infinity;
    
    forecastList.forEach(forecast => {
      const forecastTime = new Date(forecast.dt * 1000);
      const diff = Math.abs(forecastTime.getTime() - tomorrow.getTime());
      
      if (diff < minDiff) {
        minDiff = diff;
        closest = forecast;
      }
    });
    
    return closest;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
  getWeatherIcon(weatherId) {
    const icons = {
      200: '‚õàÔ∏è', // –≥—Ä–æ–∑–∞ —Å –¥–æ–∂–¥–µ–º
      300: 'üåßÔ∏è', // –º–æ—Ä–æ—Å—å
      500: 'üåßÔ∏è', // –¥–æ–∂–¥—å
      600: '‚ùÑÔ∏è', // —Å–Ω–µ–≥
      700: 'üå´Ô∏è', // —Ç—É–º–∞–Ω
      800: '‚òÄÔ∏è', // —è—Å–Ω–æ
      801: 'üå§Ô∏è', // –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ
      802: '‚õÖ', // –æ–±–ª–∞—á–Ω–æ
      803: '‚òÅÔ∏è', // –ø–∞—Å–º—É—Ä–Ω–æ
      804: '‚òÅÔ∏è'  // –ø–∞—Å–º—É—Ä–Ω–æ
    };
    
    const category = Math.floor(weatherId / 100);
    return icons[weatherId] || icons[category * 100] || 'üå§Ô∏è';
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
  getWindDirection(degrees) {
    const lang = window.lang || 'ru';
    
    if (lang === 'en') {
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Å—Ç—Ä–µ–ª–∫–∞–º–∏ (–∫—É–¥–∞ –¥—É–µ—Ç –≤–µ—Ç–µ—Ä)
      const directions = ['‚ÜìN', '‚ÜôNE', '‚ÜêE', '‚ÜñSE', '‚ÜëS', '‚ÜóSW', '‚ÜíW', '‚ÜòNW'];
      const index = Math.round(degrees / 45) % 8;
      return directions[index];
    } else {
      // –†—É—Å—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Å—Ç—Ä–µ–ª–∫–∞–º–∏ (–∫—É–¥–∞ –¥—É–µ—Ç –≤–µ—Ç–µ—Ä)
      const directions = ['‚Üì–°', '‚Üô–°–í', '‚Üê–í', '‚Üñ–Æ–í', '‚Üë–Æ', '‚Üó–Æ–ó', '‚Üí–ó', '‚Üò–°–ó'];
      const index = Math.round(degrees / 45) % 8;
      return directions[index];
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ç—Ä–∞ –ø–æ —à–∫–∞–ª–µ –ë–æ—Ñ–æ—Ä—Ç–∞
  getBeaufortDescription(speed) {
    const lang = window.lang || 'ru';
    
    if (lang === 'en') {
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
      if (speed < 0.3) return 'calm';
      if (speed < 1.6) return 'light air';
      if (speed < 3.4) return 'light breeze';
      if (speed < 5.5) return 'gentle breeze';
      if (speed < 8.0) return 'moderate breeze';
      if (speed < 10.8) return 'fresh breeze';
      if (speed < 13.9) return 'strong breeze';
      if (speed < 17.2) return 'high wind';
      if (speed < 20.8) return 'gale';
      if (speed < 24.5) return 'strong gale';
      if (speed < 28.5) return 'storm';
      if (speed < 32.7) return 'violent storm';
      return 'hurricane';
    } else {
      // –†—É—Å—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
      if (speed < 0.3) return '—à—Ç–∏–ª—å';
      if (speed < 1.6) return '—Ç–∏—Ö–∏–π';
      if (speed < 3.4) return '–ª–µ–≥–∫–∏–π';
      if (speed < 5.5) return '—Å–ª–∞–±—ã–π';
      if (speed < 8.0) return '—É–º–µ—Ä–µ–Ω–Ω—ã–π';
      if (speed < 10.8) return '—Å–≤–µ–∂–∏–π';
      if (speed < 13.9) return '—Å–∏–ª—å–Ω—ã–π';
      if (speed < 17.2) return '–∫—Ä–µ–ø–∫–∏–π';
      if (speed < 20.8) return '–æ—á–µ–Ω—å –∫—Ä–µ–ø–∫–∏–π';
      if (speed < 24.5) return '—à—Ç–æ—Ä–º';
      if (speed < 28.5) return '—Å–∏–ª—å–Ω—ã–π —à—Ç–æ—Ä–º';
      if (speed < 32.7) return '–∂–µ—Å—Ç–æ–∫–∏–π —à—Ç–æ—Ä–º';
      return '—É—Ä–∞–≥–∞–Ω';
    }
  }
  
  // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
  showError(message) {
    this.weatherError.querySelector('p').textContent = `‚ùå ${message}`;
    this.weatherError.style.display = 'block';
    this.weatherInfo.style.display = 'none';
  }
  
  // –°–∫—Ä—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
  hideError() {
    this.weatherError.style.display = 'none';
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
  getTranslation(key) {
    const lang = window.lang || 'ru';
    const translations = window.translations?.[lang] || {};
    return translations[key] || key;
  }
  
  // –ü–µ—Ä–µ–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
  translateWeatherDescription(description, weatherId) {
    const lang = window.lang || 'ru';
    
    // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
    const weatherTranslations = {
      ru: {
        'clear sky': '—è—Å–Ω–æ',
        'few clouds': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ',
        'scattered clouds': '—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞',
        'broken clouds': '–æ–±–ª–∞—á–Ω–æ',
        'overcast clouds': '–ø–∞—Å–º—É—Ä–Ω–æ',
        'light rain': '–ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å',
        'moderate rain': '—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
        'heavy rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        'light snow': '–ª–µ–≥–∫–∏–π —Å–Ω–µ–≥',
        'moderate snow': '—É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥',
        'heavy snow': '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥',
        'mist': '—Ç—É–º–∞–Ω',
        'fog': '—Ç—É–º–∞–Ω',
        'thunderstorm': '–≥—Ä–æ–∑–∞'
      },
      en: {
        '—è—Å–Ω–æ': 'clear sky',
        '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ': 'few clouds',
        '—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞': 'scattered clouds',
        '–æ–±–ª–∞—á–Ω–æ': 'broken clouds',
        '–ø–∞—Å–º—É—Ä–Ω–æ': 'overcast clouds',
        '–ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å': 'light rain',
        '—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å': 'moderate rain',
        '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å': 'heavy rain',
        '–ª–µ–≥–∫–∏–π —Å–Ω–µ–≥': 'light snow',
        '—É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥': 'moderate snow',
        '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥': 'heavy snow',
        '—Ç—É–º–∞–Ω': 'fog',
        '–≥—Ä–æ–∑–∞': 'thunderstorm'
      }
    };
    
    const translations = weatherTranslations[lang] || {};
    return translations[description.toLowerCase()] || description;
  }
  
  // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
  translateCityName(cityName) {
    const lang = window.lang || 'ru';
    
    const cityTranslations = {
      ru: {
        'Belgrade': '–ë–µ–ª–≥—Ä–∞–¥',
        'Budapest': '–ë—É–¥–∞–ø–µ—à—Ç',
        'Vienna': '–í–µ–Ω–∞',
        'Bratislava': '–ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞',
        'Bucharest': '–ë—É—Ö–∞—Ä–µ—Å—Ç',
        'Sofia': '–°–æ—Ñ–∏—è',
        'Zagreb': '–ó–∞–≥—Ä–µ–±',
        'Novi Sad': '–ù–æ–≤–∏-–°–∞–¥',
        'Subotica': '–°—É–±–æ—Ç–∏—Ü–∞',
        'Debrecen': '–î–µ–±—Ä–µ—Ü–µ–Ω',
        'Szeged': '–°–µ–≥–µ–¥',
        'Gyor': '–î—å—ë—Ä',
        'Linz': '–õ–∏–Ω—Ü',
        'Graz': '–ì—Ä–∞—Ü',
        'Kosice': '–ö–æ—à–∏—Ü–µ',
        'Nitra': '–ù–∏—Ç—Ä–∞',
        'Constanta': '–ö–æ–Ω—Å—Ç–∞–Ω—Ü–∞',
        'Timisoara': '–¢–∏–º–∏—à–æ–∞—Ä–∞',
        'Varna': '–í–∞—Ä–Ω–∞',
        'Burgas': '–ë—É—Ä–≥–∞—Å',
        'Split': '–°–ø–ª–∏—Ç',
        'Rijeka': '–†–∏–µ–∫–∞'
      },
      en: {
        '–ë–µ–ª–≥—Ä–∞–¥': 'Belgrade',
        '–ë—É–¥–∞–ø–µ—à—Ç': 'Budapest',
        '–í–µ–Ω–∞': 'Vienna',
        '–ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞': 'Bratislava',
        '–ë—É—Ö–∞—Ä–µ—Å—Ç': 'Bucharest',
        '–°–æ—Ñ–∏—è': 'Sofia',
        '–ó–∞–≥—Ä–µ–±': 'Zagreb',
        '–ù–æ–≤–∏-–°–∞–¥': 'Novi Sad',
        '–°—É–±–æ—Ç–∏—Ü–∞': 'Subotica',
        '–î–µ–±—Ä–µ—Ü–µ–Ω': 'Debrecen',
        '–°–µ–≥–µ–¥': 'Szeged',
        '–î—å—ë—Ä': 'Gyor',
        '–õ–∏–Ω—Ü': 'Linz',
        '–ì—Ä–∞—Ü': 'Graz',
        '–ö–æ—à–∏—Ü–µ': 'Kosice',
        '–ù–∏—Ç—Ä–∞': 'Nitra',
        '–ö–æ–Ω—Å—Ç–∞–Ω—Ü–∞': 'Constanta',
        '–¢–∏–º–∏—à–æ–∞—Ä–∞': 'Timisoara',
        '–í–∞—Ä–Ω–∞': 'Varna',
        '–ë—É—Ä–≥–∞—Å': 'Burgas',
        '–°–ø–ª–∏—Ç': 'Split',
        '–†–∏–µ–∫–∞': 'Rijeka'
      }
    };
    
    const translations = cityTranslations[lang] || {};
    return translations[cityName] || cityName;
  }
  
  // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω
  translateCountryName(countryCode) {
    const lang = window.lang || 'ru';
    
    const countryTranslations = {
      ru: {
        'RS': '–°–µ—Ä–±–∏—è',
        'HU': '–í–µ–Ω–≥—Ä–∏—è',
        'AT': '–ê–≤—Å—Ç—Ä–∏—è',
        'SK': '–°–ª–æ–≤–∞–∫–∏—è',
        'RO': '–†—É–º—ã–Ω–∏—è',
        'BG': '–ë–æ–ª–≥–∞—Ä–∏—è',
        'HR': '–•–æ—Ä–≤–∞—Ç–∏—è',
        'SI': '–°–ª–æ–≤–µ–Ω–∏—è',
        'ME': '–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è',
        'BA': '–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞',
        'MK': '–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è',
        'AL': '–ê–ª–±–∞–Ω–∏—è',
        'GR': '–ì—Ä–µ—Ü–∏—è',
        'TR': '–¢—É—Ä—Ü–∏—è',
        'UA': '–£–∫—Ä–∞–∏–Ω–∞',
        'MD': '–ú–æ–ª–¥–æ–≤–∞',
        'PL': '–ü–æ–ª—å—à–∞',
        'CZ': '–ß–µ—Ö–∏—è',
        'DE': '–ì–µ—Ä–º–∞–Ω–∏—è',
        'IT': '–ò—Ç–∞–ª–∏—è',
        'FR': '–§—Ä–∞–Ω—Ü–∏—è',
        'ES': '–ò—Å–ø–∞–Ω–∏—è',
        'GB': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
        'US': '–°–®–ê',
        'CA': '–ö–∞–Ω–∞–¥–∞'
      },
      en: {
        'RS': 'Serbia',
        'HU': 'Hungary',
        'AT': 'Austria',
        'SK': 'Slovakia',
        'RO': 'Romania',
        'BG': 'Bulgaria',
        'HR': 'Croatia',
        'SI': 'Slovenia',
        'ME': 'Montenegro',
        'BA': 'Bosnia and Herzegovina',
        'MK': 'North Macedonia',
        'AL': 'Albania',
        'GR': 'Greece',
        'TR': 'Turkey',
        'UA': 'Ukraine',
        'MD': 'Moldova',
        'PL': 'Poland',
        'CZ': 'Czech Republic',
        'DE': 'Germany',
        'IT': 'Italy',
        'FR': 'France',
        'ES': 'Spain',
        'GB': 'United Kingdom',
        'US': 'United States',
        'CA': 'Canada'
      }
    };
    
    const translations = countryTranslations[lang] || {};
    return translations[countryCode] || countryCode;
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
  updateLanguage() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    this.getWeatherBtn.textContent = this.getTranslation('getWeather');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    const weatherHint = document.querySelector('.weather-hint');
    if (weatherHint) {
      weatherHint.textContent = this.getTranslation('weatherHint');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
    const forecastHeading = document.querySelector('.weather-forecast h3');
    if (forecastHeading) {
      forecastHeading.textContent = this.getTranslation('forecastHeading');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    const forecastTimes = document.querySelectorAll('.forecast-time');
    forecastTimes.forEach((time, index) => {
      const keys = ['forecastMorning', 'forecastDay', 'forecastEvening', 'forecastNight'];
      if (keys[index]) {
        time.textContent = this.getTranslation(keys[index]);
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const weatherError = document.querySelector('.weather-error p');
    if (weatherError) {
      weatherError.textContent = this.getTranslation('weatherGeneralError');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    this.updateCurrentWeatherLanguage();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–≥–æ–¥—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    this.updateAllWeatherElements();
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–≥–æ–¥—ã
  updateAllWeatherElements() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    const weatherDesc = document.getElementById('weatherDesc');
    if (weatherDesc && weatherDesc.textContent) {
      const currentDesc = weatherDesc.textContent;
      const translatedDesc = this.translateWeatherDescription(currentDesc);
      if (translatedDesc !== currentDesc) {
        weatherDesc.textContent = translatedDesc;
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ - —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
    const weatherLocation = document.getElementById('weatherLocation');
    if (weatherLocation && weatherLocation.textContent) {
      const txt = weatherLocation.textContent.trim();
      const flagMatch = txt.match(/^(\p{RI}\p{RI})\s+(.*)$/u);
      if (flagMatch) {
        const flag = flagMatch[1];
        const cityShown = flagMatch[2];
        // –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
        const cityTranslated = this.translateCityName(cityShown);
        weatherLocation.textContent = `${flag} ${cityTranslated}`;
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —à–∫–∞–ª—É –ë–æ—Ñ–æ—Ä—Ç–∞
    this.updateWindUnitsAndBeaufort();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    this.forceUpdateAllElements();
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  forceUpdateAllElements() {
    const lang = window.lang || 'ru';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
    const visibilityElement = document.getElementById('weatherVisibility');
    if (visibilityElement && visibilityElement.textContent !== '--') {
      const visibilityValue = visibilityElement.textContent.match(/^(\d+)/);
      if (visibilityValue) {
        const unit = lang === 'en' ? 'm' : '–º';
        visibilityElement.textContent = `${visibilityValue[1]} ${unit}`;
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ç–µ—Ä —Å —à–∫–∞–ª–æ–π –ë–æ—Ñ–æ—Ä—Ç–∞
    const currentWind = document.getElementById('weatherWind');
    if (currentWind && currentWind.textContent.includes('(')) {
      const windSpeed = currentWind.textContent.match(/^([\d.]+)/);
      if (windSpeed) {
        const windDescription = this.getBeaufortDescription(parseFloat(windSpeed[1]));
        const windUnit = lang === 'en' ? 'm/s' : '–º/—Å';
        currentWind.textContent = `${windSpeed[1]} ${windUnit} (${windDescription})`;
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤–µ—Ç—Ä–∞
    ['Morning', 'Day', 'Evening', 'Night'].forEach(period => {
      const forecastWind = document.getElementById(`forecastWind${period}`);
      if (forecastWind && forecastWind.textContent.includes('(')) {
        const windSpeed = forecastWind.textContent.match(/^([\d.]+)/);
        if (windSpeed) {
          const windDescription = this.getBeaufortDescription(parseFloat(windSpeed[1]));
          const windUnit = lang === 'en' ? 'm/s' : '–º/—Å';
          forecastWind.textContent = `${windSpeed[1]} ${windUnit} (${windDescription})`;
        }
      }
    });
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
  updateCurrentWeatherLanguage() {
    const windLabel = document.querySelector('.weather-item[data-type="wind"] .weather-label');
    if (windLabel) {
      windLabel.textContent = this.getTranslation('wind');
    }
    
    const humidityLabel = document.querySelector('.weather-item[data-type="humidity"] .weather-label');
    if (humidityLabel) {
      humidityLabel.textContent = this.getTranslation('humidity');
    }
    
    const visibilityLabel = document.querySelector('.weather-item[data-type="visibility"] .weather-label');
    if (visibilityLabel) {
      visibilityLabel.textContent = this.getTranslation('visibility');
    }
    
    const uvIndexLabel = document.querySelector('.weather-item[data-type="uvIndex"] .weather-label');
    if (uvIndexLabel) {
      uvIndexLabel.textContent = this.getTranslation('uvIndex');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ –∏ —à–∫–∞–ª—É –ë–æ—Ñ–æ—Ä—Ç–∞
    this.updateWindUnitsAndBeaufort();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –£–§ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–¥ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ (–µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ)
    const uvEl = document.getElementById('weatherUvIndex');
    if (uvEl && uvEl.textContent && uvEl.textContent !== '--') {
      const match = uvEl.textContent.match(/([\d.]+)/);
      if (match) {
        const uv = parseFloat(match[1]);
        const desc = this.getUvDescription(uv);
        uvEl.textContent = `${uv} (${desc})`;
      }
    }
    // –õ–æ–∫–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –ø–∞–ª—É–±—ã (–µ—Å–ª–∏ –æ–Ω –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
    const deckText = document.getElementById('deckText');
    if (deckText && deckText.textContent) {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
      const windVal = parseFloat((document.getElementById('weatherWind')?.textContent || '').match(/([\d.]+)/)?.[1] || 'NaN');
      const humVal = parseFloat((document.getElementById('weatherHumidity')?.textContent || '').match(/([\d.]+)/)?.[1] || 'NaN');
      const tempVal = parseFloat((document.getElementById('weatherTemp')?.textContent || '').match(/-?[\d.]+/)?.[0] || 'NaN');
      const uvVal = parseFloat((uvEl?.textContent || '').match(/([\d.]+)/)?.[1] || 'NaN');
      const deck = this.evaluateDeckRisk(isNaN(uvVal)?undefined:uvVal, isNaN(tempVal)?undefined:tempVal, isNaN(windVal)?undefined:windVal, isNaN(humVal)?undefined:humVal, false);
      this.setDeckInfo(deck.message, deck.riskClass);
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –≤–µ—Ç—Ä–∞ –∏ —à–∫–∞–ª—ã –ë–æ—Ñ–æ—Ä—Ç–∞
  updateWindUnitsAndBeaufort() {
    // –¢–µ–ø–µ—Ä—å –≤—Å—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ forceUpdateAllElements
    this.forceUpdateAllElements();
  }

  reverseCountryLookup(localizedName) {
    const maps = {
      ru: {
        '–°–µ—Ä–±–∏—è':'RS','–í–µ–Ω–≥—Ä–∏—è':'HU','–ê–≤—Å—Ç—Ä–∏—è':'AT','–°–ª–æ–≤–∞–∫–∏—è':'SK','–†—É–º—ã–Ω–∏—è':'RO','–ë–æ–ª–≥–∞—Ä–∏—è':'BG','–•–æ—Ä–≤–∞—Ç–∏—è':'HR','–°–ª–æ–≤–µ–Ω–∏—è':'SI','–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è':'ME','–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞':'BA','–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è':'MK','–ê–ª–±–∞–Ω–∏—è':'AL','–ì—Ä–µ—Ü–∏—è':'GR','–¢—É—Ä—Ü–∏—è':'TR','–£–∫—Ä–∞–∏–Ω–∞':'UA','–ú–æ–ª–¥–æ–≤–∞':'MD','–ü–æ–ª—å—à–∞':'PL','–ß–µ—Ö–∏—è':'CZ','–ì–µ—Ä–º–∞–Ω–∏—è':'DE','–ò—Ç–∞–ª–∏—è':'IT','–§—Ä–∞–Ω—Ü–∏—è':'FR','–ò—Å–ø–∞–Ω–∏—è':'ES','–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è':'GB','–°–®–ê':'US','–ö–∞–Ω–∞–¥–∞':'CA'
      },
      en: {
        'Serbia':'RS','Hungary':'HU','Austria':'AT','Slovakia':'SK','Romania':'RO','Bulgaria':'BG','Croatia':'HR','Slovenia':'SI','Montenegro':'ME','Bosnia and Herzegovina':'BA','North Macedonia':'MK','Albania':'AL','Greece':'GR','Turkey':'TR','Ukraine':'UA','Moldova':'MD','Poland':'PL','Czech Republic':'CZ','Germany':'DE','Italy':'IT','France':'FR','Spain':'ES','United Kingdom':'GB','United States':'US','Canada':'CA'
      }
    };
    const current = window.lang || 'ru';
    const map = maps[current] || maps.ru;
    return map[localizedName] || localizedName;
  }

  getUvDescription(uv) {
    const v = Number(uv);
    const lang = window.lang || 'ru';
    const ranges = [
      { max: 2.9, ru: '–Ω–∏–∑–∫–∏–π', en: 'low' },
      { max: 5.9, ru: '—É–º–µ—Ä–µ–Ω–Ω—ã–π', en: 'moderate' },
      { max: 7.9, ru: '–≤—ã—Å–æ–∫–∏–π', en: 'high' },
      { max: 10.9, ru: '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π', en: 'very high' },
      { max: Infinity, ru: '–∫—Ä–∞–π–Ω–µ –≤—ã—Å–æ–∫–∏–π', en: 'extreme' }
    ];
    const item = ranges.find(r => v <= r.max) || ranges[0];
    return lang === 'en' ? item.en : item.ru;
  }

  getFlagEmoji(code) {
    if (!code || code.length !== 2) return '';
    const base = 127397; // 'A' -> üá¶ offset
    const chars = code.toUpperCase().split('').map(c => String.fromCodePoint(base + c.charCodeAt(0))).join('');
    return chars;
  }

  setDeckInfo(message, riskClass) {
    const box = document.getElementById('weatherDeck');
    const text = document.getElementById('deckText');
    if (!box || !text) return;
    box.classList.remove('risk-low','risk-medium','risk-high','risk-very-high','risk-extreme');
    if (riskClass) box.classList.add(riskClass);
    text.textContent = message || '‚Äî';
  }

  evaluateDeckRisk(uv, tempC, windMs, humidityPct, hasPrecip) {
    const lang = window.lang || 'ru';
    const M = (ru, en) => (lang === 'en' ? en : ru);

    // Normalize inputs
    const uvVal = (typeof uv === 'number' && !isNaN(uv)) ? uv : null;
    const t = typeof tempC === 'number' ? tempC : null;
    const w = typeof windMs === 'number' ? windMs : null;
    const h = typeof humidityPct === 'number' ? humidityPct : null;
    const p = !!hasPrecip;

    // Helper to pick
    const res = (msg, cls) => ({ message: msg, riskClass: cls });

    // Highest priority conditions
    if (w != null && w > 25 && !p) {
      return res(M('–û–ø–∞—Å–Ω–æ: —à—Ç–æ—Ä–º/—É—Ä–∞–≥–∞–Ω', 'Danger: storm/gale'), 'risk-extreme');
    }
    if (t != null && t > 40 && (w == null || w < 10) && (h == null || h > 50) && !p) {
      return res(M('–ö—Ä–∞–π–Ω–µ –æ–ø–∞—Å–Ω–æ', 'Extremely dangerous'), 'risk-extreme');
    }
    if (p) {
      return res(M('–û–ø–∞—Å–Ω–æ: –¥–æ–∂–¥—å/—à—Ç–æ—Ä–º', 'Danger: rain/storm'), 'risk-high');
    }

    // UV 8+ very high
    if (uvVal != null && uvVal >= 8 && !p) {
      return res(M('–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤', 'Very high sunburn risk'), 'risk-very-high');
    }

    // Temperature bands with humidity and wind
    if (t != null && t >= 35 && t < 40 && (w == null || w < 5) && (h != null && h > 50) && !p) {
      return res(M('–û–ø–∞—Å–Ω–æ: –ø–µ—Ä–µ–≥—Ä–µ–≤', 'Danger: heat stress'), 'risk-very-high');
    }
    if (t != null && t >= 30 && t < 35 && (w == null || w < 5) && (h != null && h > 60) && !p) {
      return res(M('–ñ–∞—Ä–∫–æ, —Ä–∏—Å–∫ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞', 'Hot, heat stress risk'), 'risk-high');
    }

    // UV 6‚Äì7
    if (uvVal != null && uvVal >= 6 && uvVal <= 7 && (t == null || t <= 30) && (h == null || h < 70) && !p) {
      if (w != null && w > 10) {
        return res(M('–û–∂–æ–≥–∏ –≤–æ–∑–º–æ–∂–Ω—ã, –Ω–æ –≤–µ—Ç–µ—Ä —Å–ø–∞—Å–∞–µ—Ç', 'Sunburn possible, wind helps'), 'risk-medium');
      }
      return res(M('–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤', 'High sunburn risk'), 'risk-high');
    }

    // UV 3‚Äì5
    if (uvVal != null && uvVal >= 3 && uvVal <= 5 && (t == null || t <= 30) && (h == null || h < 70) && !p) {
      if (w != null && w > 20) {
        return res(M('–û–ø–∞—Å–Ω–æ: –≤–µ—Ç–µ—Ä + –æ–∂–æ–≥–∏', 'Danger: wind + sunburn'), 'risk-very-high');
      }
      return res(M('–†–∏—Å–∫ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –æ–∂–æ–≥–æ–≤', 'Sunburn risk'), 'risk-medium');
    }

    // UV 0‚Äì2
    if (uvVal != null && uvVal <= 2 && (t == null || t <= 30) && !p) {
      if (w != null && w > 20) {
        return res(M('–û–ø–∞—Å–Ω–æ: —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä', 'Danger: strong wind'), 'risk-high');
      }
      if (w != null && w >= 10 && w <= 20 && (h == null || h < 70)) {
        return res(M('–°–≤–µ–∂–æ, –Ω–æ –¥—É–µ—Ç', 'Fresh, but windy'), 'risk-medium');
      }
      if ((w == null || w < 10) && (h == null || h < 70)) {
        return res(M('–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ', 'Comfortable'), 'risk-low');
      }
    }

    // Fallback generic
    return res(M('–ü—Ä–∏–µ–º–ª–µ–º–æ', 'Acceptable'), 'risk-low');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã (API –∫–ª—é—á —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
  const weatherService = new WeatherService();
  window.weatherService = weatherService;
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ
document.addEventListener('languageChanged', () => {
  if (window.weatherService) {
    window.weatherService.updateLanguage();
  }
});