window.translations = {
  ru: {
    // --- –û–±—â–∏–µ ---
    metaDescription: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –∏ –æ–±–≥–æ–Ω–∞ —Å—É–¥–æ–≤. –£–¥–æ–±–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è —Å—É–¥–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–æ–¥–Ω—ã—Ö –ø—É—Ç—è—Ö.",
    appName: "NaviMate",
    menuOpen: "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é",
    themeToggle: "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É",
    clearAll: "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë",

    // --- –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
    navCalc: "üö¢ –†–∞—Å—á—ë—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å—É–¥–æ–≤",
    navArrival: "üïí –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è",
    navWeather: "üå§Ô∏è –ü–æ–≥–æ–¥–∞",
    navSettings: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    navAbout: "‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",

    // --- –†–∞–∑–¥–µ–ª: –†–∞—Å—á—ë—Ç –≤—Å—Ç—Ä–µ—á–∏ ---
    calcHeading: "–†–∞—Å—á—ë—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å—É–¥–æ–≤",
    enemyLabel: "–í—Å—Ç—Ä–µ—á–Ω–æ–µ —Å—É–¥–Ω–æ {n}",
    ourLabel: "–ù–∞—à–µ —Å—É–¥–Ω–æ",
    posLabel: "–ü–æ–∑–∏—Ü–∏—è (–∫–º):",
    speedLabel: "–°–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á):",
    copyPos: "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ 1 –±–ª–æ–∫–∞",
    copySpeed: "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ 1 –±–ª–æ–∫–∞",
    calcBtn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
    clearBtn: "–û—á–∏—Å—Ç–∏—Ç—å",  
    errorSpeed: "‚ö†Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å —Å—É–¥–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 70 –∫–º/—á.",
    errorData: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.",
    errorSum: "–°—É–º–º–∞—Ä–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–∞ –Ω—É–ª—é.",
    meetingKm: "üìç –ö–º –≤—Å—Ç—Ä–µ—á–∏:",
    distanceToMeeting: "üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ (–∫–º):",
    timeToMeeting: "‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –≤—Å—Ç—Ä–µ—á–∏ (–º–∏–Ω):",
    waitingZone: "‚ö†Ô∏è –ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏—è:",
    restricted: "‚õî –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ –æ–±–≥–æ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω —Å {from} –ø–æ {to} –∫–º",
    kmUnit: " –∫–º",

    phStartKm: "–ù–∞–ø—Ä–∏–º–µ—Ä, 1640",
    phEndKm: "–ù–∞–ø—Ä–∏–º–µ—Ä, 2130",
    phSpeed: "–ù–∞–ø—Ä–∏–º–µ—Ä, 12",
    phEnemyPos: "–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025",
    phEnemySpeed: "–Ω–∞–ø—Ä–∏–º–µ—Ä: 25",
    phOurPos: "–Ω–∞–ø—Ä–∏–º–µ—Ä: 2008",
    phOurSpeed: "–Ω–∞–ø—Ä–∏–º–µ—Ä: 12",

    // --- –†–∞–∑–¥–µ–ª: –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è ---
    arrivalHeading: "–†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è",
    startKm: "–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä (–∫–º):",
    endKm: "–ö–æ–Ω–µ—á–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä (–∫–º):",
    speed: "–°–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á):",
    startTime: "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è:",
    workHours: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞",
    btnArrival: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è",
    desiredArrival: "–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å):",
    btnSpeed: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å–∫–æ—Ä–æ—Å—Ç—å üöÄ",
    distance: "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ",
    borderDelays: "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏",
    lockDelays: "–ó–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ —à–ª—é–∑–∞—Ö",
    delay: "–∑–∞–¥–µ—Ä–∂–∫–∞",
    

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    settingsHeading: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    themeLabel: "üåó –¢–µ–º–∞ (–¥–µ–Ω—å/–Ω–æ—á—å)",
    lightTheme: "–°–≤–µ—Ç–ª–∞—è",
    darkTheme: "–¢—ë–º–Ω–∞—è",
    langLabel: "üåç –Ø–∑—ã–∫:",
    waterwayLabel: "üåä –í–æ–¥–Ω—ã–π –ø—É—Ç—å:",

    // --- –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ---
    aboutHeading: "‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
    aboutText: "üì± NaviMate ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Å—É–¥–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–æ–¥–Ω—ã—Ö –ø—É—Ç—è—Ö.",
    toolsHeading: "üö¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
    toolCalc: "üîÅ –†–∞—Å—á—ë—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å—É–¥–æ–≤",
    toolArrival: "üïí –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è",
    toolLocks: "‚öì –®–ª—é–∑—ã –∏ üõÉ –≥—Ä–∞–Ω–∏—Ü—ã",
    toolPrivacy: "üîê –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º",
    plansHeading: "üí° –í –ø–ª–∞–Ω–∞—Ö",
    feedbackHeading: "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
    feedbackText: "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–∏ –∏–¥–µ–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –∑–∞–º–µ—á–∞–Ω–∏—è! –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å NaviMate –ª—É—á—à–µ.",
    leaveFeedback: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",

    // --- –ë–∞–Ω–Ω–µ—Ä–∞ –æ—Ñ—Ñ–ª–∞–π–Ω ---
    offlineBanner: "‚ö†Ô∏è –°–≤—è–∑—å —Å —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ—Ç–µ—Ä—è–Ω–∞. –í–æ–∑–º–æ–∂–Ω—ã –ø–µ—Ä–µ–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ.",

    // --- –û–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ ---
    work12: "12 —á–∞—Å–æ–≤",
    work14: "14 —á–∞—Å–æ–≤",
    work16: "16 —á–∞—Å–æ–≤",
    work18: "18 —á–∞—Å–æ–≤",
    work24: "24 —á–∞—Å–∞ (–Ω–æ–Ω-—Å—Ç–æ–ø)",
  
    // --- –Ø–∑—ã–∫ –∏ –≤–æ–¥–Ω—ã–π –ø—É—Ç—å ---
    langRu: "–†—É—Å—Å–∫–∏–π",
    langEn: "English",
    waterwayDanube: "–î—É–Ω–∞–π",
  
    // --- –†–∞–∑–¥–µ–ª "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏" ---
    aboutFeature1: "<strong>–ì–ª–∞–≤–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å</strong> ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç <strong>–∫–∏–ª–æ–º–µ—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∏</strong>, —á—Ç–æ –≤ —Ä–∞–∑—ã —É–ø—Ä–æ—â–∞–µ—Ç –∏ —É—Å–∫–æ—Ä—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.",
    aboutFeature2: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–º –≤—Å—Ç—Ä–µ—á–∏, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–µ—ë –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –≤—Å—Ç—Ä–µ—á–∏.",
    aboutFeature3: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤.",
    aboutFeature4: "–ë—ã—Å—Ç—Ä–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—à–µ–≥–æ —Å—É–¥–Ω–∞ (–ø–æ–∑–∏—Ü–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å) –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞.",
    aboutFeature5: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤–≤–æ–¥–∞ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö.",
    aboutFeature6: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ <strong>—Ç—ë–º–Ω–æ–π –∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã</strong> –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.",
  
    // --- –†–∞–∑–¥–µ–ª "–ü—Ä–∏–±—ã—Ç–∏–µ" ---
    arrivalFeature1: "–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å <strong>–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è</strong> –∏ <strong>–Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å–∫–æ—Ä–æ—Å—Ç—å</strong> –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
    arrivalFeature2: "–£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Å–∫–æ—Ä–æ—Å—Ç—å, –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ —à–ª—é–∑–∞—Ö –∏ –≥—Ä–∞–Ω–∏—Ü–∞—Ö, –∞ —Ç–∞–∫–∂–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å—É–¥–Ω–∞.",
    arrivalFeature3: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è.",
    
    // --- –ï–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏ ---
    hour: "—á–∞—Å",
    hours: "—á–∞—Å–∞",
    hoursMany: "—á–∞—Å–æ–≤",
    kmUnit: "–∫–º",
    hourUnit: "—á",
    
    // --- –†–∞–∑–¥–µ–ª: –ü–æ–≥–æ–¥–∞ ---
    weatherHeading: "–ü–æ–≥–æ–¥–∞",
    getWeather: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ GPS",
    weatherHint: "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏",
    forecastHeading: "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
    forecastMorning: "–£—Ç—Ä–æ",
    forecastDay: "–î–µ–Ω—å",
    forecastEvening: "–í–µ—á–µ—Ä",
    forecastNight: "–ù–æ—á—å",
    geolocationError: "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º",
    weatherError: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è GPS.",
    apiKeyNotFound: "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω",
    apiKeyError: "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á",
    apiLimitError: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
    apiError: "–û—à–∏–±–∫–∞ API",
    weatherGeneralError: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
  
    // --- –†–∞–∑–¥–µ–ª "–®–ª—é–∑—ã –∏ –≥—Ä–∞–Ω–∏—Ü—ã" ---
    lockFeature1: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —à–ª—é–∑—ã –æ—Ç <strong>–ñ–µ–ª–µ–∑–Ω—ã—Ö –í–æ—Ä–æ—Ç –¥–æ –ê—à–∞—Ö–∞</strong>.",
    lockFeature2: "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫.",
    
    // --- –ù–∞–∑–≤–∞–Ω–∏—è —à–ª—é–∑–æ–≤ ---
    lockGabchikovo: "–ì–∞–±—á–∏–∫–æ–≤–æ",
    lockIronGates2: "–ñ–µ–ª–µ–∑–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ II",
    lockIronGates1: "–ñ–µ–ª–µ–∑–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ I",
    lockFreudenau: "–§—Ä–æ–π–¥–µ–Ω–∞—É",
    lockGreifenstein: "–ì—Ä–∞–π—Ñ–µ–Ω—à—Ç–∞–π–Ω",
    lockAltenworth: "–ê–ª—å—Ç–µ–Ω–≤—ë—Ä—Ç",
    lockMelk: "–ú–µ–ª—å–∫",
    lockIbb: "–ò–±–±—Å",
    lockWallsee: "–í–∞–ª–ª–∑–µ–µ",
    lockAbwinden: "–ê–±–≤–∏–Ω–¥–µ–Ω",
    lockOttensheim: "–û—Ç—Ç–µ–Ω—Å—Ö–∞–π–º",
    lockAsah: "–ê—à–∞—Ö",
    
    // --- –ù–∞–∑–≤–∞–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü ---
    borderRomaniaGalati: "üá∑üá¥ –†—É–º—ã–Ω–∏—è: –ì–∞–ª–∞—Ü",
    borderRomaniaGiurgiu: "üá∑üá¥ –†—É–º—ã–Ω–∏—è: –î–∂—É—Ä–¥–∂—É",
    borderBulgariaRuse: "üáßüá¨ –ë–æ–ª–≥–∞—Ä–∏—è: –†—É—Å–µ",
    borderRomaniaTurnu: "üá∑üá¥ –†—É–º—ã–Ω–∏—è: –¢—É—Ä–Ω—É-–°–µ–≤–µ—Ä–∏–Ω",
    borderSerbiaVeliko: "üá∑üá∏ –°–µ—Ä–±–∏—è: –í–µ–ª–∏–∫–æ-–ì—Ä–∞–¥–∏—à—Ç–µ",
    borderSerbiaBezdan: "üá∑üá∏ –°–µ—Ä–±–∏—è: –ë–µ–∑–¥–∞–Ω",
    borderHungaryMohacs: "üá≠üá∫ –í–µ–Ω–≥—Ä–∏—è: –ú–æ—Ö–∞—á",
    borderCroatiaVukovar: "üá≠üá∑ –•–æ—Ä–≤–∞—Ç–∏—è: –í—É–∫–æ–≤–∞—Ä",
  
    borderAustriaVienna: "üá¶üáπ –ê–≤—Å—Ç—Ä–∏—è: –í–µ–Ω–∞",
  
    // --- –†–∞–∑–¥–µ–ª "–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å" ---
    privacyFeature1: "–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è <strong>–ª–æ–∫–∞–ª—å–Ω–æ –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ</strong>.",
    privacyFeature2: "–î–∞–Ω–Ω—ã–µ <strong>–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è</strong> –∏ <strong>–Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è</strong> –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
    privacyFeature3: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç <strong>–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</strong> –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è.",
  
    // --- –†–∞–∑–¥–µ–ª "–ü–ª–∞–Ω—ã" ---
    planFeature1: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –≤–≤–µ—Ä—Ö –∏–¥—É—â–∏—Ö —Å—É–¥–æ–≤ (–¥–ª—è –æ—Å–æ–±—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤).",
    planFeature2: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –±–æ—Ä—Ç–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è.",
    planFeature3: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω—è—Ö –≤–æ–¥—ã",
    planFeature4: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞",
  
    // --- –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å ---
    thanksText: "üôè –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ <strong>NaviMate</strong>! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è ‚Äî –≤—Å—ë —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.",
    calcShort: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
    share: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"

  },

  en: {
    // --- Common ---
    metaDescription: "App for calculating vessel encounters and overtaking. Convenient, fast, and simple for inland waterway captains.",
    appName: "NaviMate",
    menuOpen: "Open menu",
    themeToggle: "Toggle theme",
    clearAll: "Clear all",

    // --- Navigation ---
    navCalc: "üö¢ Meeting Calculation",
    navArrival: "üïí Arrival Time Calculation",
    navWeather: "üå§Ô∏è Weather",
    navSettings: "‚öôÔ∏è Settings",
    navAbout: "‚ÑπÔ∏è About",

    // --- Section: Meeting ---
    calcHeading: "Ship Meeting Calculation",
    enemyLabel: "Opposite vessel {n}",
    ourLabel: "Our vessel",
    posLabel: "Position (km):",
    speedLabel: "Speed (km/h):",
    copyPos: "Copy position from block 1",
    copySpeed: "Copy speed from block 1",
    calcBtn: "Calculate",
    clearBtn: "Clear",
    errorSpeed: "‚ö†Ô∏è Vessel speed must be between 0.1 and 70 km/h.",
    errorData: "Please enter all data.",
    errorSum: "Total speed cannot be zero.",
    meetingKm: "üìç Meeting point (km):",
    distanceToMeeting: "üìè Distance to meeting (km):",
    timeToMeeting: "‚è±Ô∏è Time to meeting (min):",
    waitingZone: "‚ö†Ô∏è Nearest waiting area:",
    restricted: "‚õî Passing/overtaking prohibited from {from} to {to} km",
    kmUnit: " km",
    phStartKm: "E.g., 1640",
    phEndKm: "E.g., 2130",
    phSpeed: "E.g., 12",
    phEnemyPos: "e.g., 2025",
    phEnemySpeed: "e.g., 25",
    phOurPos: "e.g., 2008",
    phOurSpeed: "e.g., 12",

    // --- Section: Arrival ---
    arrivalHeading: "Arrival Time Calculation",
    startKm: "Start kilometer (km):",
    endKm: "End kilometer (km):",
    speed: "Speed (km/h):",
    startTime: "Start time:",
    workHours: "Travel duration",
    btnArrival: "Calculate arrival time",
    desiredArrival: "Desired arrival time (to get recommended speed):",
    btnSpeed: "Calculate required speed üöÄ",
    distance: "Distance",
    borderDelays: "Border delays",
    lockDelays: "Lock delays",
    delay: "delay",

    // --- Settings ---
    settingsHeading: "‚öôÔ∏è Settings",
    themeLabel: "üåó Theme",
    lightTheme: "Light",
    darkTheme: "Dark",
    langLabel: "üåç Language:",
    waterwayLabel: "üåä Waterway:",

    // --- About ---
    aboutHeading: "‚ÑπÔ∏è About",
    aboutText: "üì± NaviMate ‚Äî a digital navigation tool for inland waterway captains.",
    toolsHeading: "üö¢ Available Tools",
    toolCalc: "üîÅ Meeting Calculation",
    toolArrival: "üïí Arrival Time Calculation",
    toolLocks: "‚öì Locks and üõÉ Borders",
    toolPrivacy: "üîê Privacy and Offline Mode",
    plansHeading: "üí° Roadmap",
    feedbackHeading: "üí¨ Feedback",
    feedbackText: "We are always happy to hear your ideas, suggestions and comments! Help us make NaviMate better.",
    leaveFeedback: "Leave feedback and suggestions",

    // --- Offline banner ---
    offlineBanner: "‚ö†Ô∏è Connection lost. Some features may not work.",

// --- Hours ---
    work12: "12 hours",
    work14: "14 hours",
    work16: "16 hours",
    work18: "18 hours",
    work24: "24 hours (non-stop)",
  
    // --- Language and waterways ---
    langRu: "Russian",
    langEn: "English",
    waterwayDanube: "Danube",
  
    // --- About app ---
    aboutFeature1: "<strong>Main feature</strong> ‚Äî instant calculation of <strong>meeting kilometer</strong>, greatly simplifying and speeding up navigation tasks.",
    aboutFeature2: "Shows meeting km, distance to it, and estimated time to meet.",
    aboutFeature3: "Supports multiple simultaneous calculations.",
    aboutFeature4: "Quickly copy our ship's data (position and speed) from the first block.",
    aboutFeature5: "Error notifications and boundary values.",
    aboutFeature6: "Supports <strong>dark and light themes</strong>.",
  
    // --- Section: Arrivals ---
    arrivalFeature1: "Allows calculating <strong>arrival time</strong> and <strong>required speed</strong> for a given time.",
    arrivalFeature2: "Takes into account distance, speed, delays at locks and borders, and ship working hours.",
    arrivalFeature3: "Direction of movement is determined automatically.",
    
    // --- Time units ---
    hour: "hour",
    hours: "hours",
    hoursMany: "hours",
    kmUnit: "km",
    hourUnit: "h",
    
    // --- Section: Weather ---
    weatherHeading: "Weather",
    getWeather: "Get weather by GPS",
    weatherHint: "Click the button to get weather at your location",
    forecastHeading: "üìÖ Tomorrow's forecast",
    forecastMorning: "Morning",
    forecastDay: "Day",
    forecastEvening: "Evening",
    forecastNight: "Night",
    geolocationError: "Geolocation is not supported by your browser",
    weatherError: "Failed to get weather. Check GPS permissions.",
    apiKeyNotFound: "API key not found",
    apiKeyError: "Invalid API key",
    apiLimitError: "API request limit exceeded",
    apiError: "API Error",
    weatherGeneralError: "Error getting weather. Check coordinates or try again later.",
  
    // --- Section: Locks and border ---
    lockFeature1: "Automatically accounts for all key locks from <strong>Iron Gates to Asah</strong>.",
    lockFeature2: "Border crossings are determined along the route, with the option to manually edit delays.",
    
    // --- Lock names ---
    lockGabchikovo: "Gabchikovo",
    lockIronGates2: "Iron Gates II",
    lockIronGates1: "Iron Gates I",
    lockFreudenau: "Freudenau",
    lockGreifenstein: "Greifenstein",
    lockAltenworth: "Altenworth",
    lockMelk: "Melk",
    lockIbb: "Ibb",
    lockWallsee: "Wallsee",
    lockAbwinden: "Abwinden",
    lockOttensheim: "Ottensheim",
    lockAsah: "Asah",
    
    // --- Border names ---
    borderRomaniaGalati: "üá∑üá¥ Romania: Galati",
    borderRomaniaGiurgiu: "üá∑üá¥ Romania: Giurgiu",
    borderBulgariaRuse: "üáßüá¨ Bulgaria: Ruse",
    borderRomaniaTurnu: "üá∑üá¥ Romania: Turnu-Severin",
    borderSerbiaVeliko: "üá∑üá∏ Serbia: Veliko-Gradiste",
    borderSerbiaBezdan: "üá∑üá∏ Serbia: Bezdan",
    borderHungaryMohacs: "üá≠üá∫ Hungary: Mohacs",
    borderCroatiaVukovar: "üá≠üá∑ Croatia: Vukovar",

    borderAustriaVienna: "üá¶üáπ Austria: Vienna",
  
    // --- Section: Privat ---
    privacyFeature1: "All calculations are performed <strong>locally in your browser</strong>.",
    privacyFeature2: "Data <strong>is not saved</strong> and <strong>not transmitted</strong> to the server.",
    privacyFeature3: "The app works <strong>offline</strong> after first opening.",
  
    // --- Section: Plans ---
    planFeature1: "Determining the nearest waiting points for upstream vessels (for special sections).",
    planFeature2: "Determining the recommended passing side.",
    planFeature3: "Adding information about water levels",
    planFeature4: "Project support page",
  
    // --- Thanks ---
    thanksText: "üôè Thank you for using <strong>NaviMate</strong>! The app is actively developing ‚Äî this is just the beginning.",
    calcShort: "Calculate",
    share: "Share"
  }
};

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞ ---
let lang = localStorage.getItem("lang") || "ru";
if (!window.translations[lang]) {
  lang = "ru";
  localStorage.setItem("lang", lang);
}
window.lang = lang; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ


// --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ ---
function setLanguage(selectedLang) {
  lang = selectedLang;
  localStorage.setItem("lang", lang);
  window.lang = lang; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ

  const t = window.translations[lang] || {};
  
  document.querySelectorAll("[data-i18n]").forEach(el => {
    const key = el.getAttribute("data-i18n");
    if (t[key]) {
      if (["input","select","textarea"].includes(el.tagName.toLowerCase())) {
        el.placeholder = t[key];
      } else {
        el.innerHTML = t[key];
      }
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
  if (typeof updateMeetingBlocks === 'function') {
    updateMeetingBlocks();
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
  if (typeof updateCalculationResults === 'function') {
    updateCalculationResults();
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
  if (typeof updateArrivalSection === 'function') {
    updateArrivalSection();
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
  if (typeof updateArrivalCalculations === 'function') {
    updateArrivalCalculations();
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –ø–æ–≥–æ–¥—ã
  if (typeof window.weatherService !== 'undefined' && window.weatherService && typeof window.weatherService.updateLanguage === 'function') {
    window.weatherService.updateLanguage();
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —è–∑—ã–∫–∞
  const langSelect = document.getElementById('language-select');
  const headerLangSelect = document.getElementById('header-language-select');
  if (langSelect) {
    langSelect.value = lang;
  }
  if (headerLangSelect) {
    headerLangSelect.value = lang;
  }
} 


 // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏ —Å—É–¥–æ–≤
function updateMeetingBlocks() {
  const t = window.translations[lang] || {};
  document.querySelectorAll('.block').forEach((block, index) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–∫—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
    if (block.closest('#arrival-calc')) return;
    const enemyPos = block.querySelector(`#enemy_pos_${index}`);
    const enemySpeed = block.querySelector(`#enemy_speed_${index}`);
    const ourPos = block.querySelector(`#our_pos_${index}`);
    const ourSpeed = block.querySelector(`#our_speed_${index}`);

    if (enemyPos) enemyPos.placeholder = t.phEnemyPos || "–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025";
    if (enemySpeed) enemySpeed.placeholder = t.phEnemySpeed || "–Ω–∞–ø—Ä–∏–º–µ—Ä: 25";
    if (ourPos) ourPos.placeholder = t.phOurPos || "–Ω–∞–ø—Ä–∏–º–µ—Ä: 2008";
    if (ourSpeed) ourSpeed.placeholder = t.phOurSpeed || "–Ω–∞–ø—Ä–∏–º–µ—Ä: 12";

    const btnCopyPos = block.querySelector('.btn-copy[onclick*="copyOurPos"]');
    if (btnCopyPos) btnCopyPos.innerText = t.copyPos || "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ 1 –±–ª–æ–∫–∞";

    const btnCopySpeed = block.querySelector('.btn-copy[onclick*="copyOurSpeed"]');
    if (btnCopySpeed) btnCopySpeed.innerText = t.copySpeed || "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ 1 –±–ª–æ–∫–∞";

    // Labels
    const labels = block.querySelectorAll('label');
    if (labels.length >= 4) {
      const enemyLabel = t.enemyLabel ? t.enemyLabel.replace("{n}", index + 1) : `–í—Å—Ç—Ä–µ—á–Ω–æ–µ —Å—É–¥–Ω–æ ${index + 1}`;
      const ourLabel = t.ourLabel || "–ù–∞—à–µ —Å—É–¥–Ω–æ";
      const posLabel = t.posLabel || "–ü–æ–∑–∏—Ü–∏—è (–∫–º):";
      const speedLabel = t.speedLabel || "–°–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á):";
      
      labels[0].innerText = enemyLabel + ": " + posLabel;
      labels[1].innerText = enemyLabel + ": " + speedLabel;
      labels[2].innerText = ourLabel + ": " + posLabel;
      labels[3].innerText = ourLabel + ": " + speedLabel;
    }

    // –ö–Ω–æ–ø–∫–∏: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏ –û—á–∏—Å—Ç–∏—Ç—å
    const calcBtn = block.querySelector('.calc-btn');
    if (calcBtn) calcBtn.innerText = t.calcBtn || "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å";

    const clearBtn = block.querySelector('.btn-clear');
    if (clearBtn) clearBtn.innerText = t.clearBtn || "–û—á–∏—Å—Ç–∏—Ç—å";
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
function updateCalculationResults() {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–ª–æ–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏
  for (let i = 0; i < 3; i++) {
    const result = document.getElementById(`result_${i}`);
    if (result && result.innerHTML.trim() !== '') {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ
      if (typeof calculate === 'function') {
        calculate(i);
      }
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
  const resultArrival = document.getElementById('resultArrival');
  if (resultArrival && resultArrival.innerHTML.trim() !== '') {
    if (typeof calculateArrival === 'function') {
      calculateArrival();
    }
  }
  
  const requiredSpeedResult = document.getElementById('requiredSpeedResultArrival');
  if (requiredSpeedResult && requiredSpeedResult.innerHTML.trim() !== '') {
    if (typeof calculateRecommendedSpeed === 'function') {
      calculateRecommendedSpeed();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
function updateArrivalSection() {
  const t = window.translations[lang] || {};
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const arrivalSection = document.getElementById('arrival-calc');
  if (!arrivalSection) return;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ labels
  const arrivalHeading = document.querySelector('#arrival-calc h2[data-i18n="arrivalHeading"]');
  if (arrivalHeading) arrivalHeading.innerHTML = t.arrivalHeading || '–†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è';
  
  const startKmLabel = document.querySelector('#arrival-calc label[for="startKmArrival"]');
  if (startKmLabel) startKmLabel.innerHTML = t.startKm || '–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä (–∫–º):';
  
  const endKmLabel = document.querySelector('#arrival-calc label[for="endKmArrival"]');
  if (endKmLabel) endKmLabel.innerHTML = t.endKm || '–ö–æ–Ω–µ—á–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä (–∫–º):';
  
  const speedLabel = document.querySelector('#arrival-calc label[for="speedArrival"]');
  if (speedLabel) speedLabel.innerHTML = t.speed || '–°–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á):';
  
  const startTimeLabel = document.querySelector('#arrival-calc label[for="startTimeArrival"]');
  if (startTimeLabel) startTimeLabel.innerHTML = t.startTime || '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è:';
  
  const workHoursLabel = document.querySelector('#arrival-calc label[for="workHoursArrival"]');
  if (workHoursLabel) workHoursLabel.innerHTML = t.workHours || '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (—á–∞—Å–æ–≤):';
  
  const desiredArrivalLabel = document.querySelector('#arrival-calc label[for="desiredArrivalTimeArrival"]');
  if (desiredArrivalLabel) desiredArrivalLabel.innerHTML = t.desiredArrival || '–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å):';
  
  // –û–±–Ω–æ–≤–ª—è–µ–º placeholders
  const startKmInput = document.getElementById('startKmArrival');
  if (startKmInput) startKmInput.placeholder = t.phStartKm || '–ù–∞–ø—Ä–∏–º–µ—Ä, 1640';
  
  const endKmInput = document.getElementById('endKmArrival');
  if (endKmInput) endKmInput.placeholder = t.phEndKm || '–ù–∞–ø—Ä–∏–º–µ—Ä, 2130';
  
  const speedInput = document.getElementById('speedArrival');
  if (speedInput) speedInput.placeholder = t.phSpeed || '–ù–∞–ø—Ä–∏–º–µ—Ä, 12';
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è datetime-local
  const startTimeInput = document.getElementById('startTimeArrival');
  const desiredTimeInput = document.getElementById('desiredArrivalTimeArrival');
  
  if (startTimeInput) {
    startTimeInput.setAttribute('data-lang', lang);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    startTimeInput.setAttribute('lang', lang);
    // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy
    if (lang === 'ru') {
      startTimeInput.setAttribute('data-date-format', 'dd.mm.yyyy');
    } else {
      startTimeInput.setAttribute('data-date-format', 'mm/dd/yyyy');
    }
  }
  if (desiredTimeInput) {
    desiredTimeInput.setAttribute('data-lang', lang);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    desiredTimeInput.setAttribute('lang', lang);
    // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy
    if (lang === 'ru') {
      desiredTimeInput.setAttribute('data-date-format', 'dd.mm.yyyy');
    } else {
      desiredTimeInput.setAttribute('data-date-format', 'mm/dd/yyyy');
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
  const btnArrival = document.querySelector('#arrival-calc .calc-btn[onclick="calculateArrival()"]');
  if (btnArrival) {
    btnArrival.innerHTML = (t.calcShort || '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å');
  }
  
  const btnSpeed = document.querySelector('#arrival-calc .calc-btn[onclick="calculateRecommendedSpeed()"]');
  if (btnSpeed) btnSpeed.innerHTML = t.btnSpeed || '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å–∫–æ—Ä–æ—Å—Ç—å üöÄ';
  
  const btnClearArrival = document.getElementById('btn-clear-arrival');
  if (btnClearArrival) btnClearArrival.innerHTML = t.clearAll || '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë';
  
  const btnShareArrival = document.getElementById('btn-share-arrival');
  if (btnShareArrival) btnShareArrival.innerHTML = t.share || '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è';
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –≤ select
  const workHoursSelect = document.getElementById('workHoursArrival');
  if (workHoursSelect) {
    const options = workHoursSelect.querySelectorAll('option');
    options.forEach(option => {
      const value = option.value;
      if (value === '12' && t.work12) option.innerHTML = t.work12;
      if (value === '14' && t.work14) option.innerHTML = t.work14;
      if (value === '16' && t.work16) option.innerHTML = t.work16;
      if (value === '18' && t.work18) option.innerHTML = t.work18;
      if (value === '24' && t.work24) option.innerHTML = t.work24;
    });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º—ã
  const themeSwitch = document.getElementById('toggle-theme-switch');
  if (themeSwitch) {
    const options = themeSwitch.querySelectorAll('option');
    options.forEach(option => {
      const value = option.value;
      if (value === 'light' && t.lightTheme) option.innerHTML = t.lightTheme;
      if (value === 'dark' && t.darkTheme) option.innerHTML = t.darkTheme;
    });
  }
  

}


// –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
// --- –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ---
document.addEventListener("DOMContentLoaded", () => {
  const savedLang = localStorage.getItem("lang") || "ru";
  
  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
  setTimeout(() => {
    setLanguage(savedLang);
    
    const langSelect = document.getElementById("language-select");
    if (langSelect) {
      langSelect.disabled = false;
      langSelect.innerHTML = `
        <option value="ru" ${savedLang === "ru" ? "selected" : ""}>–†—É—Å—Å–∫–∏–π</option>
        <option value="en" ${savedLang === "en" ? "selected" : ""}>English</option>
      `;
      langSelect.addEventListener("change", e => {
        setLanguage(e.target.value);
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (typeof updateMeetingBlocks === 'function') {
      updateMeetingBlocks();
    }
    if (typeof updateArrivalSection === 'function') {
      updateArrivalSection();
    }
    if (typeof updateCalculationResults === 'function') {
      updateCalculationResults();
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–µ–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
    setTimeout(() => {
      if (typeof updateArrivalSection === 'function') {
        updateArrivalSection();
      }
    }, 100);
  }, 100);
});
