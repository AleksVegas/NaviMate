const locks = [
  { name: "–ì–∞–±—á–∏–∫–æ–≤–æ", km: [1818, 1819], delay: 1 },
  { name: "–ñ–µ–ª–µ–∑–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ II", km: [863, 864], delay: 1 },
  { name: "–ñ–µ–ª–µ–∑–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ I", km: [943, 944], delay: 2.5 },

  // –ê–≤—Å—Ç—Ä–∏–π—Å–∫–∏–µ —à–ª—é–∑—ã:
  { name: "–§—Ä–æ–π–¥–µ–Ω–∞—É", km: [1919, 1920], delay: 1.5 },
  { name: "–ì—Ä–∞–π—Ñ–µ–Ω—à—Ç–∞–π–Ω", km: [1948, 1949], delay: 1 },
  { name: "–ê–ª—å—Ç–µ–Ω–≤—ë—Ä—Ç", km: [1980, 1981], delay: 1 },
  { name: "–ú–µ–ª—å–∫", km: [2038, 2039], delay: 1 },
  { name: "–ò–±–±—Å", km: [2060, 2061], delay: 1 },
  { name: "–í–∞–ª–ª–∑–µ–µ", km: [2095, 2096], delay: 1 },
  { name: "–ê–±–≤–∏–Ω–¥–µ–Ω", km: [2119, 2120], delay: 1 },
  { name: "–û—Ç—Ç–µ–Ω—Å—Ö–∞–π–º", km: [2147, 2148], delay: 1 },
  { name: "–ê—à–∞—Ö", km: [2163, 2164], delay: 1 } 
];


function calculateArrival() {
  const startKm = parseFloat(document.getElementById("startKmArrival").value);
  const endKm = parseFloat(document.getElementById("endKmArrival").value);
  const speed = parseFloat(document.getElementById("speedArrival").value);
  const startTimeStr = document.getElementById("startTimeArrival").value;
  const workHours = parseFloat(document.getElementById("workHoursArrival").value);

  const resultDiv = document.getElementById("resultArrival");

  if (isNaN(startKm) || isNaN(endKm) || isNaN(speed) || !startTimeStr) {
    resultDiv.innerHTML = "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.";
    return;
  }

  const startTime = new Date(startTimeStr);
  if (isNaN(startTime.getTime())) {
    resultDiv.innerHTML = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è.";
    return;
  }

  const direction = endKm > startKm ? 1 : -1;
  const distance = Math.abs(endKm - startKm);
  let travelHours = distance / speed;

  let passedLocks = [];

  locks.forEach(lock => {
    const [km1, km2] = lock.km;
    if (
      (direction === 1 && startKm <= km2 && endKm >= km1) ||
      (direction === -1 && startKm >= km1 && endKm <= km2)
    ) {
      travelHours += lock.delay;
      passedLocks.push(`‚öì –£—á—Ç—ë–Ω —à–ª—é–∑ <strong>${lock.name}</strong> ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ ${lock.delay} —á–∞—Å${lock.delay > 1 ? '–∞' : ''}`);
    }
  });

  if (workHours < 24) {
    const fullShifts = Math.floor(travelHours / workHours);
    const restTime = fullShifts * (24 - workHours);
    travelHours += restTime;
  }

  const arrivalTime = new Date(startTime.getTime() + travelHours * 3600 * 1000);
  const formattedArrival = arrivalTime.toLocaleString("ru-RU", {
    day: "2-digit",
    month: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  });

  const locksInfo = passedLocks.length > 0 ? "<br>" + passedLocks.join("<br>") : "";

  resultDiv.innerHTML = `
üö¢ <strong>–û–∂–∏–¥–∞–µ–º–æ–µ –ø—Ä–∏–±—ã—Ç–∏–µ:</strong> ${formattedArrival}<br>
‚è≥ <strong>–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${travelHours.toFixed(2)} —á<br>
üìç <strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${distance} –∫–º${locksInfo}
  `;

  document.getElementById("desiredBlockArrival").style.display = "block";
  document.getElementById("requiredSpeedResultArrival").innerHTML = "";
}

function calculateRecommendedSpeed() {
  const startKm = parseFloat(document.getElementById("startKmArrival").value);
  const endKm = parseFloat(document.getElementById("endKmArrival").value);
  const startTimeStr = document.getElementById("startTimeArrival").value;
  const desiredArrivalStr = document.getElementById("desiredArrivalTimeArrival").value;
  const workHours = parseFloat(document.getElementById("workHoursArrival").value);

  const resultDiv = document.getElementById("requiredSpeedResultArrival");

  if (isNaN(startKm) || isNaN(endKm) || !startTimeStr || !desiredArrivalStr) {
    resultDiv.innerHTML = "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.";
    return;
  }

  const startTime = new Date(startTimeStr);
  const desiredArrival = new Date(desiredArrivalStr);

  if (isNaN(startTime.getTime()) || isNaN(desiredArrival.getTime())) {
    resultDiv.innerHTML = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.";
    return;
  }

  if (desiredArrival <= startTime) {
    resultDiv.innerHTML = "‚ö†Ô∏è –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è.";
    return;
  }

  const direction = endKm > startKm ? 1 : -1;
  const distance = Math.abs(endKm - startKm);

  let totalLockDelay = 0;
  locks.forEach(lock => {
    const [km1, km2] = lock.km;
    if (
      (direction === 1 && startKm <= km2 && endKm >= km1) ||
      (direction === -1 && startKm >= km1 && endKm <= km2)
    ) {
      totalLockDelay += lock.delay;
    }
  });

  const totalAvailableMs = desiredArrival - startTime;
  let totalAvailableHours = totalAvailableMs / (1000 * 60 * 60);

  if (workHours < 24) {
    const cycles = Math.floor(totalAvailableHours / 24);
    const remainder = totalAvailableHours % 24;
    totalAvailableHours = cycles * workHours + Math.min(remainder, workHours);
  }

  const effectiveTravelHours = totalAvailableHours - totalLockDelay;

  if (effectiveTravelHours <= 0) {
    resultDiv.innerHTML = "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–±—ã—Ç—å –≤–æ–≤—Ä–µ–º—è —Å —É—á—ë—Ç–æ–º –∑–∞–¥–µ—Ä–∂–µ–∫.";
    return;
  }

  const requiredSpeed = distance / effectiveTravelHours;

  resultDiv.innerHTML = `
üöÄ <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:</strong> ${requiredSpeed.toFixed(2)} –∫–º/—á<br>
(—É—á—Ç–µ–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ —à–ª—é–∑–æ–≤ ‚öì –∏ —Ä–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫)
  `;
}

