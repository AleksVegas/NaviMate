const locks = [
  { name: "–ì–∞–±—á–∏–∫–æ–≤–æ", km: [1818, 1819], delay: 1 },
  { name: "–ñ–µ–ª–µ–∑–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ II", km: [863, 864], delay: 1 },
  { name: "–ñ–µ–ª–µ–∑–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ I", km: [943, 944], delay: 2.5 }
];

function calculateArrival() {
    const startKm = parseFloat(document.getElementById("startKm").value);
    const endKm = parseFloat(document.getElementById("endKm").value);
    const speed = parseFloat(document.getElementById("speed").value);
    const startTimeStr = document.getElementById("startTime").value;
    const workHours = parseFloat(document.getElementById("workHours").value);

    if (isNaN(startKm) || isNaN(endKm) || isNaN(speed) || !startTimeStr) {
      document.getElementById("result").innerHTML = "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.";
      return;
    }

    const startTime = new Date(startTimeStr);
    if (isNaN(startTime.getTime())) {
      document.getElementById("result").innerHTML = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è.";
      return;
    }

    const direction = endKm > startKm ? 1 : -1;
    const distance = Math.abs(endKm - startKm);
    let travelHours = distance / speed;

    let passedLocks = [];

    locks.forEach(lock => {
      const [km1, km2] = lock.km;
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ —à–ª—é–∑–æ–º
      if (
        (direction === 1 && startKm <= km2 && endKm >= km1) ||
        (direction === -1 && startKm >= km1 && endKm <= km2)
      ) {
        travelHours += lock.delay;
        passedLocks.push(`‚öì –£—á—Ç—ë–Ω —à–ª—é–∑ <strong>${lock.name}</strong> ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ ${lock.delay} —á–∞—Å${lock.delay > 1 ? '–∞' : ''}`);
      }
    });

    // –£—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞, –µ—Å–ª–∏ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤
    if (workHours < 24) {
      const fullShifts = Math.floor(travelHours / workHours);
      const restTime = fullShifts * (24 - workHours);
      travelHours += restTime;
    }

    const arrivalTime = new Date(startTime.getTime() + travelHours * 60 * 60 * 1000);
    const formattedArrival = arrivalTime.toLocaleString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      hour: "2-digit",
      minute: "2-digit"
    });

    let locksInfo = passedLocks.length > 0 ? "\n" + passedLocks.join("\n") : "";

    document.getElementById("result").innerHTML = `
üö¢ <strong>–û–∂–∏–¥–∞–µ–º–æ–µ –ø—Ä–∏–±—ã—Ç–∏–µ:</strong> ${formattedArrival}
‚è≥ <strong>–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${travelHours.toFixed(2)} —á
üìç <strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${distance} –∫–º${locksInfo}
    `;

    document.getElementById("desiredBlock").style.display = "block";
    document.getElementById("requiredSpeedResult").innerHTML = "";
  }

  function calculateRequiredSpeed() {
    const startKm = parseFloat(document.getElementById("startKm").value);
    const endKm = parseFloat(document.getElementById("endKm").value);
    const startTimeStr = document.getElementById("startTime").value;
    const desiredArrivalStr = document.getElementById("desiredArrivalTime").value;
    const workHours = parseFloat(document.getElementById("workHours").value);

    if (isNaN(startKm) || isNaN(endKm) || !startTimeStr || !desiredArrivalStr) {
      document.getElementById("requiredSpeedResult").innerHTML = "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.";
      return;
    }

    const startTime = new Date(startTimeStr);
    const desiredArrival = new Date(desiredArrivalStr);

    if (isNaN(startTime.getTime()) || isNaN(desiredArrival.getTime())) {
      document.getElementById("requiredSpeedResult").innerHTML = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.";
      return;
    }

    if (desiredArrival <= startTime) {
      document.getElementById("requiredSpeedResult").innerHTML = "‚ö†Ô∏è –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è.";
      return;
    }

    const direction = endKm > startKm ? 1 : -1;
    const distance = Math.abs(endKm - startKm);

    // –†–∞—Å—Å—á–∏—Ç–∞–µ–º –æ–±—â—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ —à–ª—é–∑–∞–º –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    let totalLockDelay = 0;
    locks.forEach(lock => {
      const [km1, km2] = lock.km;
      if (
        (direction === 1 && startKm <= km2 && endKm >= km1) ||
        (direction === -1 && startKm >= km1 && endKm <= km2)
      ) {
        totalLockDelay += lock.delay;
      }
    });

    // –†–∞—Å—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö
    const totalAvailableMs = desiredArrival - startTime;
    let totalAvailableHours = totalAvailableMs / (1000 * 60 * 60);

    // –£—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (—Å –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏)
    if (workHours < 24) {
      const cycles = Math.floor(totalAvailableHours / 24);
      const remainder = totalAvailableHours % 24;
      totalAvailableHours = cycles * workHours + Math.min(remainder, workHours);
    }

    // –í—ã—á–∏—Ç–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ —à–ª—é–∑–∞–º
    const effectiveTravelHours = totalAvailableHours - totalLockDelay;

    if (effectiveTravelHours <= 0) {
      document.getElementById("requiredSpeedResult").innerHTML = "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–±—ã—Ç—å –≤–æ–≤—Ä–µ–º—è —Å —É—á—ë—Ç–æ–º –∑–∞–¥–µ—Ä–∂–µ–∫.";
      return;
    }

    const requiredSpeed = distance / effectiveTravelHours;

    document.getElementById("requiredSpeedResult").innerHTML = `
üöÄ <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:</strong> ${requiredSpeed.toFixed(2)} –∫–º/—á
(—É—á—Ç–µ–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ —à–ª—é–∑–æ–≤ ‚öì –∏ —Ä–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫)
    `;
  }

