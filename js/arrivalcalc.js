// 1Ô∏è‚É£ –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let currentLang = 'ru';

// 2Ô∏è‚É£ –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
function translateElement(el) {
  const t = translations[currentLang];
  const key = el.getAttribute("data-i18n");
  if (!key || !t[key]) return;

  if (el.tagName === "INPUT" || el.tagName === "TEXTAREA") {
    el.placeholder = t[key];
  } else if (el.tagName === "OPTION") {
    el.textContent = t[key];
  } else {
    el.textContent = t[key];
  }
}

function applyTranslations(root = document) {
  root.querySelectorAll("[data-i18n]").forEach(translateElement);
}


function pluralizeHours(n) {
  n = Math.abs(n);
  if (Number.isInteger(n)) {
    if (n % 10 === 1 && n % 100 !== 11) return '—á–∞—Å';
    if ([2, 3, 4].includes(n % 10) && ![12, 13, 14].includes(n % 100)) return '—á–∞—Å–∞';
  }
  return '—á–∞—Å–æ–≤';
}

const locks = [
  { name: "–ì–∞–±—á–∏–∫–æ–≤–æ", km: [1818, 1819], delay: 1 },
  { name: "–ñ–µ–ª–µ–∑–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ II", km: [863, 864], delay: 1 },
  { name: "–ñ–µ–ª–µ–∑–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ I", km: [943, 944], delay: 2.5 },
  { name: "–§—Ä–æ–π–¥–µ–Ω–∞—É", km: [1919, 1920], delay: 1.5 },
  { name: "–ì—Ä–∞–π—Ñ–µ–Ω—à—Ç–∞–π–Ω", km: [1948, 1949], delay: 1 },
  { name: "–ê–ª—å—Ç–µ–Ω–≤—ë—Ä—Ç", km: [1980, 1981], delay: 1 },
  { name: "–ú–µ–ª—å–∫", km: [2038, 2039], delay: 1 },
  { name: "–ò–±–±—Å", km: [2060, 2061], delay: 1 },
  { name: "–í–∞–ª–ª–∑–µ–µ", km: [2095, 2096], delay: 1 },
  { name: "–ê–±–≤–∏–Ω–¥–µ–Ω", km: [2119, 2120], delay: 1 },
  { name: "–û—Ç—Ç–µ–Ω—Å—Ö–∞–π–º", km: [2147, 2148], delay: 1 },
  { name: "–ê—à–∞—Ö", km: [2163, 2164], delay: 1 }
];

const borderPoints = [
  { name: "–ì—Ä–∞–Ω–∏—Ü–∞ –†—É–º—ã–Ω–∏–∏ –ì–∞–ª–∞—Ü", km: 150, defaultDelay: 2 },
  { name: "–ì—Ä–∞–Ω–∏—Ü–∞ –†—É–º—ã–Ω–∏–∏ –î–∂—É—Ä–¥–∂—É", km: 497, defaultDelay: 0 },
  { name: "–ì—Ä–∞–Ω–∏—Ü–∞ –ë–æ–ª–≥–∞—Ä–∏–∏ –†—É—Å–µ", km: 495, defaultDelay: 0 },
  { name: "–ì—Ä–∞–Ω–∏—Ü–∞ –†—É–º—ã–Ω–∏–∏ –¢—É—Ä–Ω—É - –°–µ–≤–µ—Ä–∏–Ω", km: 931, defaultDelay: 0 },
  { name: "–ì—Ä–∞–Ω–∏—Ü–∞ –°–µ—Ä–±–∏–∏ –í–µ–ª–∏–∫–æ-–ì—Ä–∞–¥–∏—à—Ç–µ", km: 1050, defaultDelay: 2 },
  { name: "–ì—Ä–∞–Ω–∏—Ü–∞ –°–µ—Ä–±–∏–∏ –ë–µ–∑–¥–∞–Ω", km: 1433, defaultDelay: 2 },
  { name: "–ì—Ä–∞–Ω–∏—Ü–∞ –í–µ–Ω–≥—Ä–∏–∏ –ú–æ—Ö–∞—á", km: 1446, defaultDelay: 2 },
];

let borderDelaysInitialized = false;
let prevStartKm = null;
let prevEndKm = null;

function calculateArrival() {
  const startKm = parseFloat(document.getElementById("startKmArrival").value);
  const endKm = parseFloat(document.getElementById("endKmArrival").value);
  const speed = parseFloat(document.getElementById("speedArrival").value);
  const startTimeStr = document.getElementById("startTimeArrival").value;
  const workHours = parseFloat(document.getElementById("workHoursArrival").value);
  const resultDiv = document.getElementById("resultArrival");

  if (isNaN(startKm) || isNaN(endKm) || isNaN(speed) || !startTimeStr) {
    resultDiv.innerHTML = t.errorData;
    return;
  }
  if (speed < 0.1 || speed > 100) {
    resultDiv.innerHTML = t.errorSpeed;
    return;
  }

  const startTime = new Date(startTimeStr);
  if (isNaN(startTime.getTime())) {
    resultDiv.innerHTML = t.errorData;
    return;
  }

  if (prevStartKm !== startKm || prevEndKm !== endKm) {
    borderDelaysInitialized = false;
    prevStartKm = startKm;
    prevEndKm = endKm;
  }

  if (!borderDelaysInitialized) {
    showBorderDelays(startKm, endKm);
    borderDelaysInitialized = true;
  }

  const direction = endKm > startKm ? 1 : -1;
  const distance = Math.abs(endKm - startKm);
  let travelHours = distance / speed;

  let passedLocks = [];
  locks.forEach(lock => {
    const [km1, km2] = lock.km;
    if (
      (direction === 1 && startKm <= km2 && endKm >= km1) ||
      (direction === -1 && startKm >= km1 && endKm <= km2)
    ) {
      travelHours += lock.delay;
      passedLocks.push(`‚öì ${t.lockFeature1.replace('–∫–ª—é—á–µ–≤—ã–µ —à–ª—é–∑—ã', lock.name)} ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ ${lock.delay} ${pluralizeHours(lock.delay)}`);
    }
  });

  const borderDelaysSection = document.getElementById("borderDelaysSection");
  let borderDelayTotal = 0;
  let passedBorders = [];

  if (borderDelaysSection) {
    const inputs = borderDelaysSection.querySelectorAll("input[type='number']");
    const labels = borderDelaysSection.querySelectorAll("td:first-child");
    inputs.forEach((input, i) => {
      const delay = parseFloat(input.value);
      if (!isNaN(delay) && delay > 0) {
        borderDelayTotal += delay;
        const name = labels[i] ? labels[i].textContent : `–ì—Ä–∞–Ω–∏—Ü–∞ ${i + 1}`;
        passedBorders.push(`${name.trim()} ‚Äî ${delay} ${pluralizeHours(delay)}`);
      }
    });
    travelHours += borderDelayTotal;
  }

  const bordersInfo = passedBorders.length > 0
    ? "<br><strong>üõÉ " + t.arrivalFeature2 + ":</strong><br>" + passedBorders.join("<br>")
    : "";

  if (workHours < 24) {
    const fullShifts = Math.floor(travelHours / workHours);
    const restTime = fullShifts * (24 - workHours);
    travelHours += restTime;
  }

  const arrivalTime = new Date(startTime.getTime() + travelHours * 3600 * 1000);
  const formattedArrival = arrivalTime.toLocaleString(currentLang === 'ru' ? "ru-RU" : "en-US", {
    day: "2-digit",
    month: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  });

  const locksInfo = passedLocks.length > 0 ? "<br>" + passedLocks.join("<br>") : "";

  resultDiv.innerHTML = `
üö¢ <strong>${t.arrivalHeading}:</strong> ${formattedArrival}<br>
‚è≥ <strong>${t.workHours}:</strong> ${travelHours.toFixed(2)} —á<br>
üìç <strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${distance} –∫–º${locksInfo}${bordersInfo}
  `;

  document.getElementById("desiredBlockArrival").style.display = "block";
  document.getElementById("requiredSpeedResultArrival").innerHTML = "";
}

function calculateRecommendedSpeed() {
  const startKm = parseFloat(document.getElementById("startKmArrival").value);
  const endKm = parseFloat(document.getElementById("endKmArrival").value);
  const startTimeStr = document.getElementById("startTimeArrival").value;
  const desiredArrivalStr = document.getElementById("desiredArrivalTimeArrival").value;
  const workHours = parseFloat(document.getElementById("workHoursArrival").value);
  const resultDiv = document.getElementById("requiredSpeedResultArrival");

  if (isNaN(startKm) || isNaN(endKm) || !startTimeStr || !desiredArrivalStr) {
    resultDiv.innerHTML = t.errorData;
    return;
  }

  const startTime = new Date(startTimeStr);
  const desiredArrival = new Date(desiredArrivalStr);
  if (isNaN(startTime.getTime()) || isNaN(desiredArrival.getTime())) {
    resultDiv.innerHTML = t.errorData;
    return;
  }
  if (desiredArrival <= startTime) {
    resultDiv.innerHTML = t.errorData;
    return;
  }

  const direction = endKm > startKm ? 1 : -1;
  const distance = Math.abs(endKm - startKm);

  let totalLockDelay = 0;
  locks.forEach(lock => {
    const [km1, km2] = lock.km;
    if (
      (direction === 1 && startKm <= km2 && endKm >= km1) ||
      (direction === -1 && startKm >= km1 && endKm <= km2)
    ) {
      totalLockDelay += lock.delay;
    }
  });

  const borderDelaysSection = document.getElementById("borderDelaysSection");
  let borderDelayTotal = 0;
  if (borderDelaysSection) {
    const inputs = borderDelaysSection.querySelectorAll("input[type='number']");
    inputs.forEach(input => {
      const delay = parseFloat(input.value);
      if (!isNaN(delay) && delay > 0) {
        borderDelayTotal += delay;
      }
    });
  }

  const totalAvailableMs = desiredArrival - startTime;
  let totalAvailableHours = totalAvailableMs / (1000 * 60 * 60);

  if (workHours < 24) {
    const cycles = Math.floor(totalAvailableHours / 24);
    const remainder = totalAvailableHours % 24;
    totalAvailableHours = cycles * workHours + Math.min(remainder, workHours);
  }

  const totalDelay = totalLockDelay + borderDelayTotal;
  const effectiveTravelHours = totalAvailableHours - totalDelay;

  if (effectiveTravelHours <= 0) {
    resultDiv.innerHTML = t.errorData;
    return;
  }

  const requiredSpeed = distance / effectiveTravelHours;
  if (requiredSpeed < 0.1 || requiredSpeed > 100) {
    resultDiv.innerHTML = t.errorSpeed;
    return;
  }

  resultDiv.innerHTML = `
üöÄ <strong>${t.btnSpeed}:</strong> ${requiredSpeed.toFixed(2)} –∫–º/—á<br>
(${t.arrivalFeature2})
  `;
}


    function showBorderDelays(startKm, endKm) {
    const container = document.getElementById("borderDelaysSection");
    container.innerHTML = "";

    const relevantBorders = borderPoints.filter(b =>
    (startKm < endKm && b.km >= startKm && b.km <= endKm) ||
    (startKm > endKm && b.km <= startKm && b.km >= endKm)
  );

    if (relevantBorders.length === 0) return;
  
    const title = document.createElement("h3");
    title.textContent = "üõÉ " + t.arrivalFeature2; // –≤–º–µ—Å—Ç–æ "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏:"
    title.style.marginBottom = "8px";
    container.appendChild(title);
  
    const table = document.createElement("table");
    table.style.borderCollapse = "collapse";
    table.style.width = "100%";
    table.style.maxWidth = "380px";

    relevantBorders.forEach((border, i) => {
    const row = document.createElement("tr");

    const nameCell = document.createElement("td");
    nameCell.textContent = border.name.replace("–ì—Ä–∞–Ω–∏—Ü–∞ ", "");
    nameCell.style.padding = "4px 6px";
    nameCell.style.fontSize = "14px";
    nameCell.style.whiteSpace = "nowrap";
    nameCell.style.color = "var(--text-color, #222)";

    const inputCell = document.createElement("td");

    const input = document.createElement("input");
    input.type = "number";
    input.min = "0";
    input.step = "0.1";
    input.value = border.defaultDelay;
    input.id = `borderDelay_${i}`;

    // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–¥ —Ç—ë–º–Ω—É—é/—Å–≤–µ—Ç–ª—É—é —Ç–µ–º—ã
    input.style.width = "45px";
    input.style.padding = "3px 4px";
    input.style.fontSize = "13px";
    input.style.borderRadius = "4px";
    input.style.border = "1px solid var(--border-color, #888)";
    input.style.backgroundColor = "var(--input-bg, #fff)";
    input.style.color = "var(--text-color, #000)";
    input.style.caretColor = "auto";

    input.addEventListener("input", () => {
      calculateArrival();
    });

    const label = document.createElement("span");
    label.textContent = "—á";
    label.style.fontSize = "13px";
    label.style.opacity = "0.7";
    label.style.marginLeft = "4px";
    label.style.color = "var(--text-color, #aaa)";

    inputCell.appendChild(input);
    inputCell.appendChild(label);

    row.appendChild(nameCell);
    row.appendChild(inputCell);
    table.appendChild(row);
  });

  container.appendChild(table);
}


(function () {
  const style = document.createElement("style");
  style.innerHTML = `
    @media (prefers-color-scheme: dark) {
      #borderDelaysSection td {
        color: #eee !important;
      }
    }
  `;
  document.head.appendChild(style);
})();


//–í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', () => {
  applyTranslations();       // –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
});
